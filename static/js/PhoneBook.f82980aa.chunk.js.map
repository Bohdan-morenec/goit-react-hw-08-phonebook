{"version":3,"sources":["component/FormContact/FormContact.module.scss","component/ContactsFilter/ContactsFilter.module.scss","component/ContactList/ContactList.module.scss","Route/App.module.scss","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/v4.js","component/FormContact/FormContact.js","redux/contacts/contact-operations.js","component/ContactsFilter/ContactsFilter.js","component/ContactList/ContactList.js","Route/PhoneBook.js"],"names":["module","exports","getRandomValues","rnds8","Uint8Array","rng","crypto","bind","msCrypto","Error","validate","uuid","REGEX","test","byteToHex","i","push","toString","substr","stringify","arr","offset","arguments","length","undefined","toLowerCase","TypeError","v4","options","buf","rnds","random","FormContact","state","name","number","id","addFormContact","e","currentTarget","value","setState","dominicToretto","props","contactsItems","find","SubmitForm","preventDefault","alert","addСontact","uuidv4","className","styles","transparent","htmlFor","onSubmit","this","formInner","onChange","type","pattern","title","required","button","Component","Function","defaultProps","contacts","connect","getContacts","dispatch","a","addContactRequest","axios","post","data","addСontactSuccess","aadContactError","message","actions","filter","getFilter","filterContactState","lable","tupe","ContactList","componentDidMount","fetchContact","style","list","filteredArrayContact","map","listItem","onClick","deleteContact","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","fetchContactRequest","get","fetchСontactSuccess","fetchContactError","PhoneBook","box"],"mappings":"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","file":"static/js/PhoneBook.f82980aa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"transparent\":\"FormContact_transparent__3fJLd\",\"formInner\":\"FormContact_formInner__3IuS0\",\"button\":\"FormContact_button__1-SWQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lable\":\"ContactsFilter_lable__jtPO-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2UC-C\",\"listItem\":\"ContactList_listItem__1x8mB\",\"button\":\"ContactList_button__1TtUX\",\"name\":\"ContactList_name__10jwg\",\"number\":\"ContactList_number__2yO_R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"App_box__2hJ5b\",\"title\":\"App_title__mvXwR\",\"preloader\":\"App_preloader__13-KG\"};","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","import { Component } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./FormContact.module.scss\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../redux/contacts/contact-operations\";\r\nimport { getContacts } from \"../../redux/contacts/contact-selectors\";\r\n\r\nclass FormContact extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n    id: \"\",\r\n  };\r\n\r\n  addFormContact = (e) => {\r\n    const { name, value } = e.currentTarget;\r\n\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  dominicToretto = () => {\r\n    return this.props.contactsItems.find(({ name, number }) => {\r\n      return name === this.state.name || number === this.state.number;\r\n    });\r\n  };\r\n\r\n  SubmitForm = (e) => {\r\n    const { name, number } = this.state;\r\n\r\n    e.preventDefault();\r\n\r\n    if (this.dominicToretto()) {\r\n      return alert(\"the same name or phone number already exists\");\r\n    }\r\n\r\n    this.props.addСontact({\r\n      name: name,\r\n      number: number,\r\n      id: uuidv4(),\r\n    });\r\n\r\n    this.setState({ name: \"\", number: \"\", id: \"\" });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form\r\n        className={styles.transparent}\r\n        htmlFor={uuidv4()}\r\n        onSubmit={this.SubmitForm}\r\n      >\r\n        <div className={styles.formInner}>\r\n          <label>\r\n            Name\r\n            <input\r\n              onChange={this.addFormContact}\r\n              type=\"text\"\r\n              value={this.state.name}\r\n              name=\"name\"\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n            />\r\n          </label>\r\n          <label>\r\n            Number\r\n            <input\r\n              onChange={this.addFormContact}\r\n              type=\"tel\"\r\n              value={this.state.number}\r\n              name=\"number\"\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n              required\r\n            />\r\n          </label>\r\n          <button className={styles.button} type=\"submit\">\r\n            aad contact\r\n          </button>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nFormContact.propTypes = {\r\n  contactsItems: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n    })\r\n  ),\r\n};\r\nFunction.defaultProps = {\r\n  contacts: [],\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contactsItems: getContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  addСontact: (value) => dispatch(actions.addСontact(value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormContact);\r\n","import {\r\n  addContactRequest,\r\n  addСontactSuccess,\r\n  aadContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactRequest,\r\n  fetchСontactSuccess,\r\n  fetchContactError,\r\n} from \"./contacts-actions\";\r\n\r\nimport axios from \"axios\";\r\n\r\nexport const addСontact = (value) => async (dispatch) => {\r\n  dispatch(addContactRequest());\r\n\r\n  try {\r\n    const { data } = await axios.post(\"/contacts\", value);\r\n\r\n    dispatch(addСontactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(aadContactError(error.message));\r\n  }\r\n};\r\n\r\nexport const deleteContact = (id) => async (dispatch) => {\r\n  dispatch(deleteContactRequest());\r\n\r\n  try {\r\n    await axios.delete(`/contacts/${id}`);\r\n\r\n    dispatch(deleteContactSuccess(id));\r\n  } catch (error) {\r\n    dispatch(deleteContactError(error.message));\r\n  }\r\n};\r\n\r\nexport const fetchContact = () => async (dispatch) => {\r\n  dispatch(fetchContactRequest);\r\n\r\n  try {\r\n    const { data } = await axios.get(\"/contacts\");\r\n\r\n    dispatch(fetchСontactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactError(error.message));\r\n  }\r\n};\r\n","import PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport styles from \"./ContactsFilter.module.scss\";\r\nimport * as actions from \"../../redux/contacts/contacts-actions\";\r\nimport { getFilter } from \"../../redux/contacts/contact-selectors\";\r\n\r\nconst ContactsFilter = ({ filterContactState, filter }) => {\r\n  return (\r\n    <input\r\n      className={styles.lable}\r\n      onChange={filterContactState}\r\n      value={filter}\r\n      tupe=\"text\"\r\n      name=\"filter\"\r\n      title=\"Поиск контактов\"\r\n    />\r\n  );\r\n};\r\n\r\nContactsFilter.propTypes = {\r\n  filterContactState: PropTypes.func.isRequired,\r\n  filter: PropTypes.string.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  filter: getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  filterContactState: (e) =>\r\n    dispatch(actions.filterContact(e.currentTarget.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsFilter);\r\n","import PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport style from \"./ContactList.module.scss\";\r\nimport * as actions from \"../../redux/contacts/contact-operations\";\r\nimport { Component } from \"react\";\r\nimport { filteredArrayContact } from \"../../redux/contacts/contact-selectors\";\r\n\r\nclass ContactList extends Component {\r\n  componentDidMount = () => {\r\n    this.props.fetchContact();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <ul className={style.list}>\r\n        {this.props.filteredArrayContact.map(({ name, number, id }) => (\r\n          <li className={style.listItem} key={id}>\r\n            <p className={style.name}>\r\n              {name}: <span className={style.number}>{number}</span>\r\n            </p>\r\n            <button\r\n              className={style.button}\r\n              type=\"button\"\r\n              onClick={() => this.props.deleteContact(id)}\r\n            >\r\n              Удалить\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nContactList.propTypes = {\r\n  deleteContact: PropTypes.func.isRequired,\r\n  filteredArrayContact: PropTypes.array.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  filteredArrayContact: filteredArrayContact(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  deleteContact: (id) => dispatch(actions.deleteContact(id)),\r\n  fetchContact: () => dispatch(actions.fetchContact()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import FormContact from \"../component/FormContact\";\r\nimport ContactsFilter from \"../component/ContactsFilter\";\r\nimport ContactList from \"../component/ContactList\";\r\n\r\nimport styles from \"./App.module.scss\";\r\n\r\nconst PhoneBook = () => {\r\n  return (\r\n    <div className={styles.box}>\r\n      <h1 className={styles.title}>Phonebook</h1>\r\n      <FormContact />\r\n      <div>\r\n        <h2 className={styles.title}>contacts</h2>\r\n        <ContactsFilter />\r\n        <ContactList />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PhoneBook;\r\n"],"sourceRoot":""}